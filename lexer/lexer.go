// Code generated by gocc; DO NOT EDIT.

package lexer

import (
	"io/ioutil"
	"unicode/utf8"

	"github.com/teslamotors/jsonql/token"
)

const (
	NoState    = -1
	NumStates  = 110
	NumSymbols = 106
)

type Lexer struct {
	src    []byte
	pos    int
	line   int
	column int
}

func NewLexer(src []byte) *Lexer {
	lexer := &Lexer{
		src:    src,
		pos:    0,
		line:   1,
		column: 1,
	}
	return lexer
}

func NewLexerFile(fpath string) (*Lexer, error) {
	src, err := ioutil.ReadFile(fpath)
	if err != nil {
		return nil, err
	}
	return NewLexer(src), nil
}

func (l *Lexer) Scan() (tok *token.Token) {
	tok = new(token.Token)
	if l.pos >= len(l.src) {
		tok.Type = token.EOF
		tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = l.pos, l.line, l.column
		return
	}
	start, startLine, startColumn, end := l.pos, l.line, l.column, 0
	tok.Type = token.INVALID
	state, rune1, size := 0, rune(-1), 0
	for state != -1 {
		if l.pos >= len(l.src) {
			rune1 = -1
		} else {
			rune1, size = utf8.DecodeRune(l.src[l.pos:])
			l.pos += size
		}

		nextState := -1
		if rune1 != -1 {
			nextState = TransTab[state](rune1)
		}
		state = nextState

		if state != -1 {

			switch rune1 {
			case '\n':
				l.line++
				l.column = 1
			case '\r':
				l.column = 1
			case '\t':
				l.column += 4
			default:
				l.column++
			}

			switch {
			case ActTab[state].Accept != -1:
				tok.Type = ActTab[state].Accept
				end = l.pos
			case ActTab[state].Ignore != "":
				start, startLine, startColumn = l.pos, l.line, l.column
				state = 0
				if start >= len(l.src) {
					tok.Type = token.EOF
				}

			}
		} else {
			if tok.Type == token.INVALID {
				end = l.pos
			}
		}
	}
	if end > start {
		l.pos = end
		tok.Lit = l.src[start:end]
	} else {
		tok.Lit = []byte{}
	}
	tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = start, startLine, startColumn

	return
}

func (l *Lexer) Reset() {
	l.pos = 0
}

/*
Lexer symbols:
0: '_'
1: '.'
2: '.'
3: '"'
4: '\'
5: '"'
6: '"'
7: '''
8: '\'
9: '''
10: '''
11: '='
12: '='
13: '='
14: '!'
15: '='
16: '<'
17: '='
18: '>'
19: '='
20: '>'
21: '<'
22: 'i'
23: 's'
24: 'i'
25: 's'
26: 'n'
27: 'o'
28: 't'
29: 'n'
30: 'o'
31: 't'
32: 'n'
33: 'u'
34: 'l'
35: 'l'
36: 'd'
37: 'e'
38: 'f'
39: 'i'
40: 'n'
41: 'e'
42: 'd'
43: '~'
44: '='
45: '!'
46: '~'
47: '='
48: '+'
49: '-'
50: '*'
51: '/'
52: '%'
53: '^'
54: '!'
55: 't'
56: 'r'
57: 'u'
58: 'e'
59: 'f'
60: 'a'
61: 'l'
62: 's'
63: 'e'
64: '.'
65: '['
66: ']'
67: '_'
68: 'e'
69: 'E'
70: '+'
71: '-'
72: '0'
73: '0'
74: 'x'
75: 'X'
76: '\'
77: 'x'
78: '\'
79: 'u'
80: 'b'
81: 'f'
82: 'n'
83: 'r'
84: 't'
85: 'v'
86: '\'
87: '\'
88: ' '
89: '\t'
90: '\f'
91: '\v'
92: \u00a0
93: \u202f
94: \u205f
95: \u3000
96: \ufeff
97: 'A'-'Z'
98: 'a'-'z'
99: '0'-'9'
100: '1'-'9'
101: '0'-'7'
102: 'a'-'f'
103: 'A'-'F'
104: \u2000-\u200a
105: .
*/
